// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThanksCardServer.Model;

namespace ThanksCardServer.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ThanksCardServer.Model.Cards", b =>
                {
                    b.Property<long?>("Card_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Card_Style")
                        .HasColumnType("text");

                    b.Property<string>("Card_Type")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Card_ID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("ThanksCardServer.Model.Departments", b =>
                {
                    b.Property<long?>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Department_Name")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Department_ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ThanksCardServer.Model.LogReceives", b =>
                {
                    b.Property<long?>("ReceiveLog_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("SendLog_ID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status_Code")
                        .HasColumnType("integer");

                    b.HasKey("ReceiveLog_ID");

                    b.HasIndex("SendLog_ID");

                    b.HasIndex("Status_Code");

                    b.ToTable("LogReceives");
                });

            modelBuilder.Entity("ThanksCardServer.Model.LogSends", b =>
                {
                    b.Property<long?>("SendLog_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("Card_ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("FromUser_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<long>("Message_ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("Receiver_ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("Sender_ID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status_Code")
                        .HasColumnType("integer");

                    b.Property<long?>("ToUser_ID")
                        .HasColumnType("bigint");

                    b.HasKey("SendLog_ID");

                    b.HasIndex("Card_ID");

                    b.HasIndex("FromUser_ID");

                    b.HasIndex("Message_ID");

                    b.HasIndex("Status_Code");

                    b.HasIndex("ToUser_ID");

                    b.ToTable("LogSends");
                });

            modelBuilder.Entity("ThanksCardServer.Model.Messages", b =>
                {
                    b.Property<long?>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Message_Text")
                        .HasColumnType("text");

                    b.HasKey("Message_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ThanksCardServer.Model.Roles", b =>
                {
                    b.Property<long?>("Role_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Role_Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Role_ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ThanksCardServer.Model.Status", b =>
                {
                    b.Property<int?>("Status_Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Status_Name")
                        .HasColumnType("text");

                    b.HasKey("Status_Code");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("ThanksCardServer.Model.Users", b =>
                {
                    b.Property<long?>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("Department_ID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<long?>("Role_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("User_Name")
                        .HasColumnType("text");

                    b.Property<string>("newPassword")
                        .HasColumnType("text");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("User_ID");

                    b.HasIndex("Department_ID");

                    b.HasIndex("Role_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ThanksCardServer.Model.LogReceives", b =>
                {
                    b.HasOne("ThanksCardServer.Model.LogSends", "LogSends")
                        .WithMany("LogReceives")
                        .HasForeignKey("SendLog_ID");

                    b.HasOne("ThanksCardServer.Model.Status", "Status")
                        .WithMany("LogReceives")
                        .HasForeignKey("Status_Code");
                });

            modelBuilder.Entity("ThanksCardServer.Model.LogSends", b =>
                {
                    b.HasOne("ThanksCardServer.Model.Cards", "Cards")
                        .WithMany("LogSends")
                        .HasForeignKey("Card_ID");

                    b.HasOne("ThanksCardServer.Model.Users", "From")
                        .WithMany()
                        .HasForeignKey("FromUser_ID");

                    b.HasOne("ThanksCardServer.Model.Messages", "Messages")
                        .WithMany("LogSends")
                        .HasForeignKey("Message_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThanksCardServer.Model.Status", "Status")
                        .WithMany("LogSends")
                        .HasForeignKey("Status_Code");

                    b.HasOne("ThanksCardServer.Model.Users", "To")
                        .WithMany()
                        .HasForeignKey("ToUser_ID");
                });

            modelBuilder.Entity("ThanksCardServer.Model.Users", b =>
                {
                    b.HasOne("ThanksCardServer.Model.Departments", "Departments")
                        .WithMany("Users")
                        .HasForeignKey("Department_ID");

                    b.HasOne("ThanksCardServer.Model.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("Role_ID");
                });
#pragma warning restore 612, 618
        }
    }
}
